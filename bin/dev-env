#!/bin/bash

COMMAND=$1
WORKING_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

exec 6>/dev/null

function start() {
  cd "$WORKING_DIR/../dev-env" || exit
  local RUNNING="$(docker compose ls | grep -e '^dev-env[ ]*running'| wc -l)"
  if [ "$RUNNING" -eq 1 ]
  then
    echo 'Joining already running dev-env...'
    docker exec -it sepal-dev bash
  else
    SEPAL_CONFIG=${SEPAL_ENV:-~/.sepal}
    if [ -d "$SEPAL_CONFIG" ]
    then
      echo "Starting dev-env with configuration from $SEPAL_CONFIG..."
      docker compose up --build --remove-orphans -d >&6 2>&1
      docker exec -it sepal-dev bash
    else
      >&2 echo "Configuration directory not found: ${SEPAL_CONFIG}. Create a directory at this location, or select a different directorywith the -c option or by setting the SEPAL_CONFIG env variable."
    fi
  fi
}

function stop() {
  cd "$WORKING_DIR/../dev-env" || exit
  echo 'Stopping dev-env...'
  docker compose down --remove-orphans >&6 2>&1
}

function usage() {
    echo ""
    echo "Usage:"
    echo ""
    echo "  $(basename $0) start                Start the dev-env"
    echo "  $(basename $0) stop                 Stop the dev-env"
    echo "  $(basename $0) restart              Restart the dev-env"
    echo ""
    echo "Options:"
    echo ""
    echo "  -v, --verbose                Enable verbose output"
    echo "  -c, --verbose                Enable verbose output"
    echo ""
    exit 1
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -v|--verbose)
    exec 6>&1
    shift # past argument
    shift # past value
    ;;
    -c|--config)
    SEPAL_ENV="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

case "$COMMAND" in
    start)
        start
        RETVAL=$?
        ;;
    stop)
        stop
        RETVAL=$?
        ;;
    restart)
        stop
        start
        RETVAL=$?
        ;;
    *)
        usage
        RETVAL=1
        ;;
esac

exit $RETVAL
