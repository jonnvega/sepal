- name: Configure Builder Image
  strategy: debug
  hosts: all
  user: ec2-user
  become: yes
  gather_facts: true

  vars_files:
    - "{{ secret_vars_file }}"

  tasks:
    - name: Copy GPU drivers init script
      copy:
        src: "../sepal/gpu/init-gpu-drivers.sh"
        dest: "/usr/local/bin/init-gpu-drivers.sh"

    - name: Copy GPU drivers init service
      copy:
        src: "../sepal/gpu/init-gpu-drivers.service"
        dest: "/etc/systemd/system/init-gpu-drivers.service"

    - name: Install GPU drivers
      script: "../sepal/gpu/install-gpu-drivers.sh"
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"

    - name: Create filesystem on Docker volume
      filesystem:
        fstype: xfs
        dev: /dev/xvdf

    - name: Mount Docker volume
      mount:
        path: /var/lib/docker
        src: /dev/xvdf
        fstype: xfs
        state: mounted

    - name: Create docker-registry certificate dir
      file:
        path: "/etc/docker/certs.d/{{ docker_repository_host }}"
        state: directory

    - name: Copy docker-registry certificate
      copy:
        src: "{{ config_home }}/certificates/docker-registry.crt"
        dest: "/etc/docker/certs.d/{{ docker_repository_host }}/ca.crt"

    - name: Install docker
      command: "amazon-linux-extras install docker -y"

    - name: Create /etc/docker
      file:
        path: "/etc/docker"
        state: directory

    - name: Copy /etc/docker/daemon.json
      copy: src=docker/builder-daemon.json dest=/etc/docker/daemon.json

    - name: Add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker

    - name: Create /etc/systemd/system/docker.service.d
      file:
        path: "/etc/systemd/system/docker.service.d"
        state: directory
    - name: Copy /etc/systemd/system/docker.service.d/docker.conf
      copy: src=docker/docker.conf dest=/etc/systemd/system/docker.service.d/docker.conf

    - name: Enable docker
      systemd:
        name: docker
        state: started
        enabled: yes
        masked: no

    - name: Login to docker registry
      command: "docker login -p '{{ docker_password }}' -u '{{ docker_username }}' {{ docker_repository_host }}"

#    - name: Pull sandbox
#      command: "docker pull {{ docker_repository_host }}/openforis/sandbox:{{ version }}"
#
#    - name: Pull task
#      command: "docker pull {{ docker_repository_host }}/openforis/task:{{ version }}"
#
#    - name: Logout from docker registry
#      command: "docker logout {{ docker_repository_host }}"
