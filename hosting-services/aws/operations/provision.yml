- name: Setup AWS
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    - name: Create Operations security group
      ec2_group:
        name: Operations
        description: The Sepal Security Group
        region: "{{ lookup('env', 'AWS_REGION') }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 168.202.0.0/16
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: "{{ local_ip_address }}/32"
            rule_desc: 'Deployer'
        rules_egress:
          - proto: all
            from_port: 0
            to_port: 65535
            cidr_ip: 0.0.0.0/0

    - name: Provision Operations instance
      ec2_instance:
        key_name: "{{ lookup('env', 'AWS_REGION') }}"
        security_groups: 
          - "Operations"
        instance_type: t3a.large
        image_id: "{{ lookup('env', 'AWS_AMI') }}"
        region: "{{ lookup('env', 'AWS_REGION') }}"
        wait: true
        exact_count: 1
        filters:
          tag:Type: "Operations"
          tag:Environment: "{{ lookup('env', 'DEPLOY_ENVIRONMENT') }}"
          instance-state-name: running
        tags:
          Name: "Operations"
          Type: Operations
          Environment: "{{ lookup('env', 'DEPLOY_ENVIRONENT') }}"
        ebs_optimized: true
        volumes:
          - device_name: /dev/xvda
            ebs:
              delete_on_termination: false
              volume_type: gp3
              volume_size: 100
          - device_name: /dev/sdb # /var/lib/docker
            ebs:
              delete_on_termination: false
              volume_type: gp3
              volume_size: 100

    - ec2_instance_info:
        region: "{{ lookup('env', 'AWS_REGION') }}"
        filters:
          tag:Type: "Operations"
          instance-state-name: running
      register: ec2_ops

    - name: Wait for SSH to be available on Operations
      local_action: wait_for host="{{ item.public_ip_address }}"
                    port=22
                    state="started"
      with_items: "{{ ec2_ops.instances }}"

