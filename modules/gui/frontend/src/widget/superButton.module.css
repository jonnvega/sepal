.container {
    margin-bottom: .5rem;
    border-radius: var(--button-border-radius);
}

.container.expanded {
    border-color: var(--wireframe-color) !important;
}

.container:last-child {
    margin-bottom: 0;
}

.main {
    position: relative;
    align-items: center;
    padding: .25rem .5rem;
    display: grid;
    column-gap: .5rem;
    grid-template-columns: 1fr auto;
    grid-template-areas:
        'content inline';
}

/* absolutely positioned click target is needed
to prevent click-through from click-hold buttons */
.main .clickTarget {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    border-radius: var(--button-border-radius);
    z-index: 1;
}

.content {
    grid-area: content;
    flex-shrink: 1;
}

.inline {
    grid-area: inline;
    z-index: 1;
    flex-shrink: 0;
}

.expand {
    border-top: var(--wireframe);
    padding: 1rem .5rem;
    cursor: default;
    pointer-events: all;
    background-color: hsla(var(--look-transparent-h), calc(var(--look-transparent-s) * .5), calc(var(--look-transparent-l) * .8), var(--look-overlay-a));
}

.expanded .info > * {
    white-space: nowrap;
    word-break: normal;
}

.description {
    font-size: .9rem;
    white-space: normal;
    word-wrap: break-word;
}

.timestamp {
    font-size: small;
    margin-right: 2rem;
    color: gray;
}

@media screen and (max-width: 600px) {
    .timestamp {
        font-size: small;
        margin-right: .5rem;
        color: gray;
    }
}

.draggable {
    cursor: grab;
    display: grid;
    grid-template-columns: auto 1fr;
    align-items: center;
}


.handle {
    width: 1rem;
    height: 100%;
    margin: 0;
    color: rgb(40%, 40%, 40%);
}

.handle::before {
    content: '.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..';
    position: absolute;
    display: flex;
    align-items: center;
    width: 1rem;
    top: .5rem;
    bottom: .5rem;
    left: .25rem;
    overflow: hidden;
    line-height: .4rem;
}

.dragging.original {
    opacity: .5;
}

.dragging.clone {
    opacity: .9;
}

.dragHandle {
    cursor: grab;
}

.unclickable {
    cursor: default;
}

.draggableContainer {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 2;
    pointer-events: none;
}

.draggableClone {
    position: absolute;
    top: calc(var(--y) * 1px);
    left: calc(var(--x) * 1px);
    width: calc(var(--width) * 1px);
    height: calc(var(--height) * 1px);
    display: flex;
    z-index: 1;
}

.draggableClone > * {
    flex-grow: 1;
}
